<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-26T16:16:01+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">绯羽的博客</title><subtitle>白日梦想家</subtitle><author><name>true</name></author><entry><title type="html">关于react中click自执行</title><link href="http://localhost:4000/2021/01/02/%E5%85%B3%E4%BA%8EReact%E4%B8%ADclick%E8%87%AA%E6%89%A7%E8%A1%8C.html" rel="alternate" type="text/html" title="关于react中click自执行" /><published>2021-01-02T00:00:00+08:00</published><updated>2021-01-02T00:00:00+08:00</updated><id>http://localhost:4000/2021/01/02/%E5%85%B3%E4%BA%8EReact%E4%B8%ADclick%E8%87%AA%E6%89%A7%E8%A1%8C</id><content type="html" xml:base="http://localhost:4000/2021/01/02/%E5%85%B3%E4%BA%8EReact%E4%B8%ADclick%E8%87%AA%E6%89%A7%E8%A1%8C.html">&lt;h3 id=&quot;关于react中click自执行&quot;&gt;关于React中click自执行&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onClick = {此处为函数引用或匿名函数}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;所以如果&lt;code class=&quot;highlighter-rouge&quot;&gt;onclick={this.handle()}&lt;/code&gt;这种写法就相当于写了一个自执行函数，会在页面初始化时执行。点击的话也不会触发相应的事件。&lt;/p&gt;

&lt;p&gt;解决方案&lt;/p&gt;

&lt;p&gt;方法一&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;方法二&lt;/p&gt;

&lt;div class=&quot;language-jsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>true</name></author><summary type="html">关于React中click自执行</summary></entry><entry><title type="html">对于开发管理流程的思考</title><link href="http://localhost:4000/2020/12/16/%E5%AF%B9%E4%BA%8E%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%E4%B8%8E%E6%8F%90%E5%8D%87%E7%B3%BB%E7%BB%9F%E5%8F%AF%E7%94%A8%E6%80%A7%E7%9A%84%E6%80%9D%E8%80%83.html" rel="alternate" type="text/html" title="对于开发管理流程的思考" /><published>2020-12-16T00:00:00+08:00</published><updated>2020-12-16T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/16/%E5%AF%B9%E4%BA%8E%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%E4%B8%8E%E6%8F%90%E5%8D%87%E7%B3%BB%E7%BB%9F%E5%8F%AF%E7%94%A8%E6%80%A7%E7%9A%84%E6%80%9D%E8%80%83</id><content type="html" xml:base="http://localhost:4000/2020/12/16/%E5%AF%B9%E4%BA%8E%E5%BC%80%E5%8F%91%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B%E4%B8%8E%E6%8F%90%E5%8D%87%E7%B3%BB%E7%BB%9F%E5%8F%AF%E7%94%A8%E6%80%A7%E7%9A%84%E6%80%9D%E8%80%83.html">&lt;h3 id=&quot;对于开发管理流程的思考&quot;&gt;对于开发管理流程的思考&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;版本开发：&lt;/strong&gt;
1、开发人员认真阅读需求文档，检查澄清会议中提出问题需求文档是否已经修改，最新的需求文档是否合理，有没有问题或者疑问，有问题及时提出。
2、需求文档中高保真psd是否已经提供，没有提供及时提出要求最晚时间点。
3、开发人员严格按照需求文档，UI高保真效果图设计效果开发，如高保真和效果图不一致者及时提出让修改，如有实现不了功能提前上报问题。
4、开发过程中一般不能变化需求，如有需求变更，沟通之后让更新需求文档，以最终需求文档为准，如时间紧急，可优先开发，再补需求文档以作记录。
5、开发人员开发完成必须进行自测，自测通过在转内部测试。
&lt;strong&gt;开发联调：&lt;/strong&gt;
开发人员针对涉及外部系统对接功能需求，
1、要清楚对接哪些系统，具体业务场景和使用流程，怎么对接联调调用。
2、涉及外部系统联调环境是否具备，测试环境、灰度环境、生产环境以及线路是否一致。
3、对方具体联调时间计划，测试环境、灰度环境、生产环境联调时间点。
4、所有对接联沟通等，由开发技术负责人整体负责，如外部系统时间计划与我们不一致，及时上升给版本负责人进行协调。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;测试用例评审&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从测试环境、灰度环境等测试资源、功能实现原理、影响范围、测试方法、依赖外部系统等多方面进行评审，确保测试场景全覆盖。
&lt;strong&gt;评审流程：&lt;/strong&gt;&lt;br /&gt;
1、质量组输出测试用例。
2、内部测试人员输出测试用例，与质保组测试用例进行整合，提前一天发给开发人员。
3、测试人员负责收集每个开发人员对测试用例反馈建议。
4、测试人员与质保组根据开发反馈建议完善测试用例，完善之后组织召开评审。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;上线前的风险评估&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1、对于线下经过与方案、开发，测试、版本负责人沟通确定，无风险项的版本，不用组织会议再进行评审，微信群里通知说明
2、对于有风险项，需要组织会议进行评估，重点从功能影响范围、依赖外部系统、测试、灰度环境测试情况评估风险项的影响范围和版本回退方案。
评审流程：
      \1. 风险点反馈和评估&lt;br /&gt;
      \2. 灰度环境或者测试环境测试结果
      \3. 版本回退方案
      \4. 测试模块简要（让大家把关是否有少测试的模块部分）&lt;/p&gt;

&lt;h3 id=&quot;提升系统可用性&quot;&gt;提升系统可用性&lt;/h3&gt;

&lt;p&gt;异地容灾，当IT系统只在一处部署时，当突发停电或自然灾害等情况时，也难以保障正常提供服务。在A地点部署主用系统，同时在B地点对关键应用及数据进行异地灾备。当主用系统不可以用时，启用备用系统，以增强系统的可用性。&lt;/p&gt;

&lt;p&gt;应用服务方面，系统中有多个应用程序向外提供服务，这些应用程序需同时部署于多台服务器，当某一个服务节点出现问题时，其他的节点仍能保持服务不中断，形成冗余备份。当服务器断电重启时，应用程序（服务组件）应具备自动启动的能力，保障系统的高可用。&lt;/p&gt;</content><author><name>feiYu</name></author><category term="开发管理" /><summary type="html">对于开发管理流程的思考</summary></entry><entry><title type="html">JS中的call(（）、apply（）和bind（）</title><link href="http://localhost:4000/2020/12/15/JS%E4%B8%AD%E7%9A%84call(-apply-%E5%92%8Cbind.html" rel="alternate" type="text/html" title="JS中的call(（）、apply（）和bind（）" /><published>2020-12-15T00:00:00+08:00</published><updated>2020-12-15T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/15/JS%E4%B8%AD%E7%9A%84call(()%E3%80%81apply()%E5%92%8Cbind()</id><content type="html" xml:base="http://localhost:4000/2020/12/15/JS%E4%B8%AD%E7%9A%84call(-apply-%E5%92%8Cbind.html">&lt;h3 id=&quot;js中的callapply和bind&quot;&gt;JS中的call(（）、apply（）和bind（）&lt;/h3&gt;

&lt;p&gt;再js中，call、apply、bind都是用来改变原函数执行上下文，也就是说，改变函数执行时内部的this指向。&lt;/p&gt;

&lt;p&gt;语法：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...])&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//参数为null或者undefined时，则指向全局对象&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;apply&quot;&gt;Apply:&lt;/h4&gt;

&lt;p&gt;在调用一个存在的函数时，你可以为其指定一个this对象。this指的是当前调用这个函数的对象。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;我的颜色是&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;yellow&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fruits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;// red&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//yellow&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;apple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;another&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//yellow&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;用apply将数组各项添加到另一个数组&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ele&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ele&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//如果直接push的话，会将ele整个作为一个元素传递给array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实现继承&lt;/p&gt;</content><author><name>feiYu</name></author><category term="Js" /><summary type="html">JS中的call(（）、apply（）和bind（）</summary></entry><entry><title type="html">谈谈浏览器的两种缓存机制</title><link href="http://localhost:4000/2020/12/14/%E8%B0%88%E8%B0%88%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html" rel="alternate" type="text/html" title="谈谈浏览器的两种缓存机制" /><published>2020-12-14T00:00:00+08:00</published><updated>2020-12-14T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/14/%E8%B0%88%E8%B0%88%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6</id><content type="html" xml:base="http://localhost:4000/2020/12/14/%E8%B0%88%E8%B0%88%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6.html">&lt;h3 id=&quot;谈谈浏览器的两种缓存机制&quot;&gt;谈谈浏览器的两种缓存机制&lt;/h3&gt;</content><author><name>feiYu</name></author><category term="浏览器" /><summary type="html">谈谈浏览器的两种缓存机制</summary></entry><entry><title type="html">对于Vuex中actions与mutations区别的理解</title><link href="http://localhost:4000/2020/12/09/%E5%AF%B9%E4%BA%8EVuex%E4%B8%AD%E7%9A%84actions%E4%B8%8Emutations%E5%8C%BA%E5%88%AB%E7%9A%84%E7%90%86%E8%A7%A3.html" rel="alternate" type="text/html" title="对于Vuex中actions与mutations区别的理解" /><published>2020-12-09T00:00:00+08:00</published><updated>2020-12-09T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/09/%E5%AF%B9%E4%BA%8EVuex%E4%B8%AD%E7%9A%84actions%E4%B8%8Emutations%E5%8C%BA%E5%88%AB%E7%9A%84%E7%90%86%E8%A7%A3</id><content type="html" xml:base="http://localhost:4000/2020/12/09/%E5%AF%B9%E4%BA%8EVuex%E4%B8%AD%E7%9A%84actions%E4%B8%8Emutations%E5%8C%BA%E5%88%AB%E7%9A%84%E7%90%86%E8%A7%A3.html">&lt;h3 id=&quot;对于vuex中的actions与mutations区别的理解&quot;&gt;对于Vuex中的actions与mutations区别的理解&lt;/h3&gt;

&lt;p&gt;actions与mutations同样可以实现异步操作，为什么异步操作要用actions而不是mutations呢？&lt;/p&gt;

&lt;p&gt;官方文档中的说明&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;实际上在mutation中执行异步操作，并不适合devtools进行调试，追踪状态的变更。&lt;/p&gt;

&lt;p&gt;改变state唯一的方法是提交mutation，所在在action中需要commit触发mutation进行状态更改。&lt;/p&gt;

&lt;h4 id=&quot;所以&quot;&gt;所以&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Mutation中写的是同步函数，actions中写的需要是异步函数，这是一种约定，为了更好的追踪vuex的状态变更，我们都需要按照这种原则进行开发。&lt;/li&gt;
  &lt;li&gt;更改state的唯一方法是提交mutation，action中需要通过commit触发mutation。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>feiYu</name></author><category term="vue" /><category term="vuex" /><summary type="html">对于Vuex中的actions与mutations区别的理解</summary></entry><entry><title type="html">对于vuex状态管理的理解</title><link href="http://localhost:4000/2020/12/09/%E5%AF%B9Vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3.html" rel="alternate" type="text/html" title="对于vuex状态管理的理解" /><published>2020-12-09T00:00:00+08:00</published><updated>2020-12-09T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/09/%E5%AF%B9Vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3</id><content type="html" xml:base="http://localhost:4000/2020/12/09/%E5%AF%B9Vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E7%9A%84%E7%90%86%E8%A7%A3.html">&lt;h3 id=&quot;对vuex状态管理的理解&quot;&gt;对Vuex状态管理的理解&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;vue官方文档对于Vuex的定义：是一种状态管理模式，采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态已一种可预测的方式发生变化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个简单的单向数据流如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://vuex.vuejs.org/flow.png&quot; alt=&quot;单向数据流&quot; /&gt;&lt;/p&gt;

&lt;p&gt;state：驱动应用的数据源&lt;/p&gt;

&lt;p&gt;view：以声明方式将state映射到视图&lt;/p&gt;

&lt;p&gt;actions：导致状态变化，响应在view上的用户输入（简单说就是导致数据状态变化的用户输入）&lt;/p&gt;

&lt;p&gt;但是！&lt;/p&gt;

&lt;p&gt;当我们的应用遇到多个组件共享状态时，单向的数据流的简洁性很容易被破坏：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;当多个视图依赖同一状态时&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;来自不同的视图行为需要变更同一状态。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于问题一，传参的方法对于多层嵌套的组件非常麻烦。并且难以实现兄弟组件的状态传递。&lt;/p&gt;

&lt;p&gt;对于问题二，我们通常用拷贝等方法进行解决，这样常常导致代码难以维护。&lt;/p&gt;

&lt;p&gt;为了处理以上问题，就出现了现在的状态共享，将组件的状态提取出来，以一个全局的单例模式进行状态管理。&lt;/p&gt;

&lt;p&gt;通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;定义与隔离&lt;/code&gt; 状态管理中的各种概念并通过强制规则维持视图与状态间的独立性。&lt;/p&gt;

&lt;p&gt;以上就是vuex的基本概念&lt;/p&gt;</content><author><name>feiYu</name></author><category term="vue" /><category term="vuex" /><summary type="html">对Vuex状态管理的理解</summary></entry><entry><title type="html">重零开始搭建自己的vue项目</title><link href="http://localhost:4000/2020/12/02/%E9%87%8D%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VUE%E9%A1%B9%E7%9B%AE.html" rel="alternate" type="text/html" title="重零开始搭建自己的vue项目" /><published>2020-12-02T00:00:00+08:00</published><updated>2020-12-02T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/02/%E9%87%8D%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VUE%E9%A1%B9%E7%9B%AE</id><content type="html" xml:base="http://localhost:4000/2020/12/02/%E9%87%8D%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84VUE%E9%A1%B9%E7%9B%AE.html">&lt;h3 id=&quot;重零开始搭建前后端分离项目vue--node--express&quot;&gt;重零开始搭建前后端分离项目（Vue + node + express）&lt;/h3&gt;

&lt;p&gt;前端框架 &lt;a href=&quot;http://localhost:3000/showMsg&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;项目框架 Vue
Css sass
Js TypeScript
接口请求 Axios
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;后台框架 &lt;a href=&quot;http://localhost:3000/showMsg&quot;&gt;项目地址&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;开发语言 Node
框架 express
数据库 mongodb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;一初始化前台本地项目&quot;&gt;一、初始化前台本地项目&lt;/h4&gt;
&lt;p&gt;1、全局安装vue-cli
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g @vue/cli&lt;/code&gt;
查看vue-cli版本
&lt;code class=&quot;highlighter-rouge&quot;&gt;vue -V&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;初始化项目&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vue init webpack my-vue-project&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;二初始化后台项目&quot;&gt;二、初始化后台项目&lt;/h3&gt;

&lt;p&gt;1、 全局安装express-generator&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cnpm install express-generator -g&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2、初始化项目&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;express --view=pug express-project&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3、安装supervisor&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cnpm install supervisor -g&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4、修改配置为 &lt;code class=&quot;highlighter-rouge&quot;&gt;supervisor ./bin/www&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;supervisor node./bin/www&lt;/code&gt;&lt;/p&gt;</content><author><name>true</name></author><summary type="html">重零开始搭建前后端分离项目（Vue + node + express）</summary></entry><entry><title type="html">前端性能优化之重绘重排</title><link href="http://localhost:4000/2020/12/01/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E9%87%8D%E7%BB%98%E9%87%8D%E6%8E%92.html" rel="alternate" type="text/html" title="前端性能优化之重绘重排" /><published>2020-12-01T00:00:00+08:00</published><updated>2020-12-01T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/01/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E9%87%8D%E7%BB%98%E9%87%8D%E6%8E%92</id><content type="html" xml:base="http://localhost:4000/2020/12/01/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-%E9%87%8D%E7%BB%98%E9%87%8D%E6%8E%92.html">&lt;h3 id=&quot;前端性能优化重绘重排&quot;&gt;前端性能优化——重绘重排&lt;/h3&gt;

&lt;p&gt;首先来了解几个概念&lt;/p&gt;

&lt;blockquote&gt;

&lt;/blockquote&gt;</content><author><name>feiYu</name></author><category term="性能优化" /><summary type="html">前端性能优化——重绘重排</summary></entry><entry><title type="html">浏览器渲染页面原理与流程</title><link href="http://localhost:4000/2020/12/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B.html" rel="alternate" type="text/html" title="浏览器渲染页面原理与流程" /><published>2020-12-01T00:00:00+08:00</published><updated>2020-12-01T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B</id><content type="html" xml:base="http://localhost:4000/2020/12/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E9%A1%B5%E9%9D%A2%E5%8E%9F%E7%90%86%E4%B8%8E%E6%B5%81%E7%A8%8B.html">&lt;h3 id=&quot;浏览器渲染页面原理与流程&quot;&gt;浏览器渲染页面原理与流程&lt;/h3&gt;

&lt;p&gt;首先来了解几个概念&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;dom树：表示一个页面的结构&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;渲染树：表示一个页面如何展示&lt;/li&gt;
  &lt;li&gt;CssRuleTree： 将Css解析成树形的数据结构&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;浏览器在将域名通过网络通信从服务器中拿到Html页面后，根据Html文件结构构建&lt;code class=&quot;highlighter-rouge&quot;&gt;Dom树&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;Css Rule Tree&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;过程中遇到了Js的话，会阻塞DOM树以及CSS树的构建，优先加载Js，加载完毕后才继续进行DOM树和CSS树的构建。&lt;/li&gt;
  &lt;li&gt;当两者构建完毕后就开始进行渲染树的构建&lt;code class=&quot;highlighter-rouge&quot;&gt;renderTree&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;进行页面的布局计算（重排），重排后开始绘制页面（重绘）。此后若如果Js操作了DOM节点，改变了页面布局，则开始重新进行重重排或重绘。&lt;a href=&quot;&quot;&gt;前端性能—重绘与重排详情&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;dom树&quot;&gt;Dom树&lt;/h4&gt;

&lt;p&gt;Html中的所有元素都是节点，所有节点都有层级关系，就像一个树形的结构。&lt;/p&gt;

&lt;p&gt;常见的几种节点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;文档节点&lt;/li&gt;
  &lt;li&gt;元素节点&lt;/li&gt;
  &lt;li&gt;文本节点&lt;/li&gt;
  &lt;li&gt;属性节点&lt;/li&gt;
  &lt;li&gt;注释节点&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dom树的构建相当与一次深度优先遍历。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;D:\MyBlog\skwings.github.io\assets\images\dom.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;构建css树&quot;&gt;构建CSS树&lt;/h4&gt;

&lt;p&gt;Css文档中的所有的元素也是节点，Css中所有节点同样拥有层级关系，如父子关系、兄弟元素等，以此构建Css树。&lt;/p&gt;

&lt;p&gt;由于在构建dom树的过程中，Html中含有link标签，浏览器由此预见了需要此资源来渲染页面，所以会在构建dom树时就开始进行对此Css资源的请求，并进行Dom树的构建。&lt;/p&gt;

&lt;p&gt;Css树的构建与Dom树一样，读取文档，再将字节转化成字符，确定token（标签），再将token转化为nodes，通过nodes构建Css树。&lt;/p&gt;</content><author><name>feiYu</name></author><category term="浏览器" /><summary type="html">浏览器渲染页面原理与流程</summary></entry><entry><title type="html">浏览器与服务器之间的交互协议</title><link href="http://localhost:4000/2020/12/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BA%A4%E4%BA%92%E5%8D%8F%E8%AE%AE.html" rel="alternate" type="text/html" title="浏览器与服务器之间的交互协议" /><published>2020-12-01T00:00:00+08:00</published><updated>2020-12-01T00:00:00+08:00</updated><id>http://localhost:4000/2020/12/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BA%A4%E4%BA%92%E5%8D%8F%E8%AE%AE</id><content type="html" xml:base="http://localhost:4000/2020/12/01/%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BA%A4%E4%BA%92%E5%8D%8F%E8%AE%AE.html">&lt;h3 id=&quot;浏览器与服务器之间的交互协议&quot;&gt;浏览器与服务器之间的交互协议&lt;/h3&gt;</content><author><name>feiYu</name></author><category term="浏览器" /><summary type="html">浏览器与服务器之间的交互协议</summary></entry></feed>